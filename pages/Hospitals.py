import streamlit as st
import requests
from geopy.distance import geodesic
import time
import folium
from streamlit_folium import folium_static

# Language configuration - match the home.py file
LANGUAGES = {
    "en": "English",
    "ta": "Tamil",
    "hi": "Hindi",
    "te": "Telugu"
}

# UI translations for the hospitals page - fixed syntax from the original
UI_TRANSLATIONS = {
    "ta": {
        "page_title": "роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН",
        "page_icon": "ЁЯПе",
        "app_header": "<h1>ЁЯПе роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН</h1>",
        "app_description": "<div class=\"app-description\">роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп роЗро░рпБрокрпНрокро┐роЯродрпНродро┐ро▒рпНроХрпБ роЕро░рпБроХро┐ро▓рпН роЙро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН. роЗроирпНрод рокропройрпНрокро╛роЯрпБ OpenStreetMap родро░ро╡рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роЙроЩрпНроХро│рпИроЪрпН роЪрпБро▒рпНро▒ро┐ропрпБро│рпНро│ рооро░рпБродрпНродрпБро╡ ро╡роЪродро┐роХро│рпИроХрпН роХрогрпНроЯро▒ро┐роирпНродрпБ родрпВро░ родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ.</div>",
        "settings_panel": "тЪЩя╕П родрпЗроЯро▓рпН роЕроорпИрокрпНрокрпБроХро│рпН",
        "search_radius": "родрпЗроЯро▓рпН роЖро░роорпН (роХро┐.роорпА)",
        "maximum_results": "роЕродро┐роХрокроЯрпНроЪ роорпБроЯро┐ро╡рпБроХро│рпН",
        "detect_location_button": "ЁЯУН роОройродрпБ роЗро░рпБрокрпНрокро┐роЯродрпНродрпИроХрпН роХрогрпНроЯро▒ро┐",
        "refresh_button": "ЁЯФД роорпБроЯро┐ро╡рпБроХро│рпИрокрпН рокрпБродрпБрокрпНрокро┐",
        "detecting_location": "роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИроХрпН роХрогрпНроЯро▒ро┐роХро┐ро▒родрпБ...",
        "your_location": "<strong>ЁЯУН роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯроорпН:</strong> {0:.6f}, {1:.6f}<br><small>{2} роХро┐.роорпА роЖро░родрпНродро┐ро▒рпНроХрпБро│рпН рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИродрпН родрпЗроЯрпБроХро┐ро▒родрпБ</small>",
        "searching_hospitals": "ЁЯФН роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИродрпН родрпЗроЯрпБроХро┐ро▒родрпБ...",
        "nearest_hospitals": "<h3>ЁЯУЛ роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН</h3>",
        "hospital_card": "<div class=\"hospital-card\"><div class=\"hospital-name\">{0}. {1}</div><div class=\"hospital-distance\">ЁЯУН {2} роХро┐.роорпА родрпКро▓рпИро╡ро┐ро▓рпН</div><div class=\"hospital-actions\"><a href=\"{3}\" target=\"_blank\" class=\"primary-button\">ЁЯУ▒ роХрпВроХрпБро│рпН роорпЗрокрпНро╕рпН</a><a href=\"{4}\" target=\"_blank\" class=\"secondary-button\">ЁЯЧ║я╕П OSM</a></div></div>",
        "no_hospitals_found": "ЁЯШХ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЖро░родрпНродро┐ро▒рпНроХрпБро│рпН рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. родрпЗроЯро▓рпН родрпВро░родрпНродрпИ роЕродро┐роХро░ро┐роХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "click_detect_location": "ЁЯСЖ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЕро░рпБроХро┐ро▓рпН роЙро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп 'роОройродрпБ роЗро░рпБрокрпНрокро┐роЯродрпНродрпИроХрпН роХрогрпНроЯро▒ро┐' роОройрпНрокродрпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН",
        "map_placeholder": "роЗро░рпБрокрпНрокро┐роЯроХрпН роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ ро╡ро░рпИрокроЯроорпН роЗроЩрпНроХрпЗ родрпЛройрпНро▒рпБроорпН",
        "location_error": "роЗро░рпБрокрпНрокро┐роЯродрпНродрпИроХрпН роХрогрпНроЯро▒ро┐роп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.",
        "fetch_hospitals_error": "рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИрокрпН рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {0}"
    },
    "hi": {
        "page_title": "рдЖрд╕-рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓",
        "page_icon": "ЁЯПе",
        "app_header": "<h1>ЁЯПе рдЖрд╕-рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓</h1>",
        "app_description": "<div class=\"app-description\">рдЕрдкрдиреЗ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдХреЗ рдкрд╛рд╕ рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдПрдВред рдпрд╣ рдРрдк OpenStreetMap рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЖрдкрдХреЗ рдЖрд╕рдкрд╛рд╕ рдХреЗ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рддреА рд╣реИ рдФрд░ рджреВрд░реА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред</div>",
        "settings_panel": "тЪЩя╕П рдЦреЛрдЬ рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "search_radius": "рдЦреЛрдЬ рддреНрд░рд┐рдЬреНрдпрд╛ (рдХрд┐рдореА)",
        "maximum_results": "рдЕрдзрд┐рдХрддрдо рдкрд░рд┐рдгрд╛рдо",
        "detect_location_button": "ЁЯУН рдореЗрд░реЗ рд╕реНрдерд╛рди рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдПрдВ",
        "refresh_button": "ЁЯФД рдкрд░рд┐рдгрд╛рдо рд░реАрдлреНрд░реЗрд╢ рдХрд░реЗрдВ",
        "detecting_location": "рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рдкрддрд╛ рд▓рдЧрд╛ рд░рд╣рд╛ рд╣реИ...",
        "your_location": "<strong>ЁЯУН рдЖрдкрдХрд╛ рд╕реНрдерд╛рди:</strong> {0:.6f}, {1:.6f}<br><small>{2} рдХрд┐рдореА рддреНрд░рд┐рдЬреНрдпрд╛ рдХреЗ рднреАрддрд░ рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░ рд░рд╣рд╛ рд╣реИ</small>",
        "searching_hospitals": "ЁЯФН рдЖрд╕-рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░ рд░рд╣рд╛ рд╣реИ...",
        "nearest_hospitals": "<h3>ЁЯУЛ рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓</h3>",
        "hospital_card": "<div class=\"hospital-card\"><div class=\"hospital-name\">{0}. {1}</div><div class=\"hospital-distance\">ЁЯУН {2} рдХрд┐рдореА рджреВрд░</div><div class=\"hospital-actions\"><a href=\"{3}\" target=\"_blank\" class=\"primary-button\">ЁЯУ▒ рдЧреВрдЧрд▓ рдореИрдкреНрд╕</a><a href=\"{4}\" target=\"_blank\" class=\"secondary-button\">ЁЯЧ║я╕П OSM</a></div></div>",
        "no_hospitals_found": "ЁЯШХ рдирд┐рд░реНрджрд┐рд╖реНрдЯ рддреНрд░рд┐рдЬреНрдпрд╛ рдХреЗ рднреАрддрд░ рдХреЛрдИ рдЕрд╕реНрдкрддрд╛рд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдЦреЛрдЬ рджреВрд░реА рдмрдврд╝рд╛рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "click_detect_location": "ЁЯСЖ рдЕрдкрдиреЗ рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП 'рдореЗрд░реЗ рд╕реНрдерд╛рди рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдПрдВ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ",
        "map_placeholder": "рд╕реНрдерд╛рди рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рдмрд╛рдж рдорд╛рдирдЪрд┐рддреНрд░ рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛",
        "location_error": "рд╕реНрдерд╛рди рдХрд╛ рдкрддрд╛ рдирд╣реАрдВ рд▓рдЧрд╛ рд╕рдХрд╛ред",
        "fetch_hospitals_error": "рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдХреЛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: {0}"
    },
    "te": {
        "page_title": "р░╕р░ор▒Ар░к р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р▒Б",
        "page_icon": "ЁЯПе",
        "app_header": "<h1>ЁЯПе р░╕р░ор▒Ар░к р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р▒Б</h1>",
        "app_description": "<div class=\"app-description\">р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╕р▒Нр░ер░╛р░ир░╛р░ир░┐р░Хр░┐ р░жр░Чр▒Нр░Чр░░р░▓р▒Л р░Йр░ир▒Нр░и р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐. р░И р░пр░╛р░кр▒Н OpenStreetMap р░бр▒Зр░Яр░╛р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐ р░ор▒А р░Ър▒Бр░Яр▒Нр░Яр▒В р░Йр░ир▒Нр░и р░╡р▒Ир░жр▒Нр░п р░╕р▒Мр░Хр░░р▒Нр░пр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░┐ р░жр▒Вр░░ р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.</div>",
        "settings_panel": "тЪЩя╕П р░╢р▒Лр░зр░и р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б",
        "search_radius": "р░╢р▒Лр░зр░и р░╡р▒Нр░пр░╛р░╕р░╛р░░р▒Нр░зр░В (р░Хр░┐.р░ор▒А)",
        "maximum_results": "р░Чр░░р░┐р░╖р▒Нр░Я р░лр░▓р░┐р░др░╛р░▓р▒Б",
        "detect_location_button": "ЁЯУН р░ир░╛ р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐",
        "refresh_button": "ЁЯФД р░лр░▓р░┐р░др░╛р░▓р░ир▒Б р░░р░┐р░лр▒Нр░░р▒Жр░╖р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "detecting_location": "р░ор▒А р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░Вр░Яр▒Лр░Вр░жр░┐...",
        "your_location": "<strong>ЁЯУН р░ор▒А р░╕р▒Нр░ер░╛р░ир░В:</strong> {0:.6f}, {1:.6f}<br><small>{2} р░Хр░┐.р░ор▒А р░╡р▒Нр░пр░╛р░╕р░╛р░░р▒Нр░зр░Вр░▓р▒Л р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р░ир▒Б р░╢р▒Лр░зр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐</small>",
        "searching_hospitals": "ЁЯФН р░╕р░ор▒Ар░к р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓ р░Хр▒Лр░╕р░В р░╢р▒Лр░зр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
        "nearest_hospitals": "<h3>ЁЯУЛ р░╕р░ор▒Ар░к р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р▒Б</h3>",
        "hospital_card": "<div class=\"hospital-card\"><div class=\"hospital-name\">{0}. {1}</div><div class=\"hospital-distance\">ЁЯУН {2} р░Хр░┐.р░ор▒А р░жр▒Вр░░р░Вр░▓р▒Л</div><div class=\"hospital-actions\"><a href=\"{3}\" target=\"_blank\" class=\"primary-button\">ЁЯУ▒ р░Чр▒Вр░Чр▒Бр░▓р▒Н р░ор▒Нр░пр░╛р░кр▒Нр░╕р▒Н</a><a href=\"{4}\" target=\"_blank\" class=\"secondary-button\">ЁЯЧ║я╕П OSM</a></div></div>",
        "no_hospitals_found": "ЁЯШХ р░кр▒Зр░░р▒Нр░Хр▒Кр░ир▒Нр░и р░╡р▒Нр░пр░╛р░╕р░╛р░░р▒Нр░зр░Вр░▓р▒Л р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б. р░╢р▒Лр░зр░и р░жр▒Вр░░р░╛р░ир▒Нр░ир░┐ р░кр▒Жр░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        "click_detect_location": "ЁЯСЖ р░ор▒Ар░Хр▒Б р░╕р░ор▒Ар░кр░Вр░▓р▒Л р░Йр░ир▒Нр░и р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░бр░╛р░ир░┐р░Хр░┐ 'р░ир░╛ р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐' р░кр▒И р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "map_placeholder": "р░╕р▒Нр░ер░╛р░и р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░др░░р▒Нр░╡р░╛р░д р░ор▒Нр░пр░╛р░кр▒Н р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐",
        "location_error": "р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ор▒Б.",
        "fetch_hospitals_error": "р░Жр░╕р▒Бр░кр░др▒Нр░░р▒Бр░▓р░ир▒Б р░кр▒Кр░Вр░жр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐: {0}"
    },
    "en": {
        "page_title": "Nearby Hospitals",
        "page_icon": "ЁЯПе",
        "app_header": "<h1>ЁЯПе Nearby Hospitals</h1>",
        "app_description": "<div class=\"app-description\">Find hospitals near your current location. This app uses OpenStreetMap data to locate medical facilities around you and provides distance information.</div>",
        "settings_panel": "тЪЩя╕П Search Settings",
        "search_radius": "Search radius (km)",
        "maximum_results": "Maximum results",
        "detect_location_button": "ЁЯУН Detect My Location",
        "refresh_button": "ЁЯФД Refresh Results",
        "detecting_location": "Detecting your location...",
        "your_location": "<strong>ЁЯУН Your Location:</strong> {0:.6f}, {1:.6f}<br><small>Searching for hospitals within {2} km radius</small>",
        "searching_hospitals": "ЁЯФН Searching for nearby hospitals...",
        "nearest_hospitals": "<h3>ЁЯУЛ Nearest Hospitals</h3>",
        "hospital_card": "<div class=\"hospital-card\"><div class=\"hospital-name\">{0}. {1}</div><div class=\"hospital-distance\">ЁЯУН {2} km away</div><div class=\"hospital-actions\"><a href=\"{3}\" target=\"_blank\" class=\"primary-button\">ЁЯУ▒ Google Maps</a><a href=\"{4}\" target=\"_blank\" class=\"secondary-button\">ЁЯЧ║я╕П OSM</a></div></div>",
        "no_hospitals_found": "ЁЯШХ No hospitals found within the specified radius. Try increasing the search distance.",
        "click_detect_location": "ЁЯСЖ Click 'Detect My Location' to find hospitals near you",
        "map_placeholder": "Map will appear here after location detection",
        "location_error": "Couldn't detect location.",
        "fetch_hospitals_error": "Failed to fetch hospitals: {0}"
    }
}

# Initialize session state for language if not exists
if 'language' not in st.session_state:
    st.session_state.language = 'en'  # Default to English

def main():
    """Enhanced Nearby Hospitals App with Dark Mode and Language Support"""
    # Get current language
    current_lang = st.session_state.language
    ui = UI_TRANSLATIONS[current_lang]
    
    st.set_page_config(
        page_title=ui["page_title"],
        page_icon=ui["page_icon"],
        layout="wide",
    )
    
    # Add language selector to sidebar
    st.sidebar.image("firstaid.png", width=80)
    
    with st.sidebar:
        st.markdown("### ЁЯМР " + ("Language" if current_lang == "en" else "роорпКро┤ро┐" if current_lang == "ta" else "рднрд╛рд╖рд╛" if current_lang == "hi" else "р░нр░╛р░╖"))
        
        with st.container(border=True):
            selected_language = st.selectbox(
                "Select your preferred language",
                options=list(LANGUAGES.keys()),
                format_func=lambda x: LANGUAGES[x],
                index=list(LANGUAGES.keys()).index(current_lang),
                key="language_selector"
            )
        
        # Update session state when language changes
        if selected_language != current_lang:
            st.session_state.language = selected_language
            st.rerun()  # Rerun the app to reflect language changes
        
        st.divider()
    
    # Apply dark mode styling
    st.markdown("""
    <style>
    /* Dark mode colors */
    :root {
        --background-color: #121212;
        --card-background: #1e1e1e;
        --primary-color: #3b82f6;
        --secondary-color: #374151;
        --text-color: #e2e8f0;
        --muted-text: #9ca3af;
        --accent-color: #3b82f6;
        --border-color: #2d3748;
        --hover-color: #2d3748;
    }
    
    /* Main styling */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1200px;
        background-color: var(--background-color);
        color: var(--text-color);
    }
    
    /* Override Streamlit's default white background */
    .stApp {
        background-color: var(--background-color);
    }
    
    /* Headers */
    h1, h2, h3 {
        color: var(--text-color);
        font-weight: 700;
        border-bottom: 2px solid var(--accent-color);
        padding-bottom: 0.5rem;
    }
    
    /* Location card */
    .location-card {
        background-color: #1a2234;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 20px;
        border-left: 5px solid var(--accent-color);
        color: var(--text-color);
    }
    
    /* Hospital cards */
    .hospital-card {
        background-color: var(--card-background);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 12px;
        border: 1px solid var(--border-color);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        transition: all 0.2s ease;
        color: var(--text-color);
    }
    
    .hospital-card:hover {
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
        transform: translateY(-2px);
        background-color: var(--hover-color);
    }
    
    /* Hospital details */
    .hospital-name {
        font-weight: 600;
        color: var(--accent-color);
        font-size: 1.1rem;
        margin-bottom: 4px;
    }
    
    .hospital-distance {
        color: var(--muted-text);
    }
    
    .hospital-actions {
        margin-top: 8px;
    }
    
    /* Map container */
    .map-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        border: 1px solid var(--border-color);
    }
    
    /* Loading animation */
    @keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
    
    .loading {
        animation: pulse 1.5s infinite;
        background-color: #1a2234;
        padding: 12px;
        border-radius: 8px;
        text-align: center;
        color: var(--text-color);
    }
    
    /* Settings panel */
    .settings-panel {
        background-color: var(--card-background);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 20px;
        border: 1px solid var(--border-color);
    }
    /* Buttons */
    .primary-button {
        background-color: #1d4ed8; /* vivid indigo */
        color: #ffffff;
        padding: 10px 18px;
        border-radius: 8px;
        text-decoration: none;
        display: inline-block;
        margin-right: 10px;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
    }
    
    .primary-button:hover {
        background-color: #1e40af; /* deeper indigo */
        transform: translateY(-1px);
    }
    
    .secondary-button {
        background-color: #f4f4f5; /* light neutral */
        color: #111827; /* dark text for readability */
        padding: 10px 18px;
        border-radius: 8px;
        text-decoration: none;
        display: inline-block;
        margin-right: 10px;
        font-weight: 600;
        border: 1px solid #d1d5db;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
    }
    
    .secondary-button:hover {
        background-color: #e5e7eb; /* subtle hover effect */
        transform: translateY(-1px);
    }
    
    /* Override Streamlit components */
    .stTextInput, .stSelectbox, .stSlider {
        background-color: var(--card-background);
        color: var(--text-color);
    }
    
    .stExpander {
        background-color: var(--card-background);
        border: 1px solid var(--border-color);
    }
    
    /* Divider */
    hr {
        border-top: 1px solid var(--border-color);
    }
    
    /* Info/warning messages */
    .stAlert {
        background-color: var(--card-background);
        color: var(--text-color);
        border: 1px solid var(--border-color);
    }
    
    /* App description */
    .app-description {
        color: var(--muted-text);
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # App header - use translations
    st.markdown(ui["app_header"], unsafe_allow_html=True)
    st.markdown(ui["app_description"], unsafe_allow_html=True)
    
    # Settings panel - use translations
    with st.expander(ui["settings_panel"], expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            radius = st.slider(ui["search_radius"], min_value=1, max_value=20, value=5)
            
        with col2:
            max_results = st.slider(ui["maximum_results"], min_value=3, max_value=15, value=5)
            
    # Get user location
    if 'user_location' not in st.session_state:
        st.session_state.user_location = None
        st.session_state.hospitals = None
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button(ui["detect_location_button"], use_container_width=True, type="primary"):
            with st.spinner(ui["detecting_location"]):
                user_lat, user_lon = get_user_location(ui)
                if user_lat and user_lon:
                    st.session_state.user_location = (user_lat, user_lon)
                    st.rerun()
    
    with col2:
        if st.button(ui["refresh_button"], use_container_width=True, 
                    disabled=not st.session_state.user_location):
            st.session_state.hospitals = None
            st.rerun()
    
    # Display location and search for hospitals
    if st.session_state.user_location:
        user_lat, user_lon = st.session_state.user_location
        
        # Location card - use translations
        st.markdown(ui["your_location"].format(user_lat, user_lon, radius), unsafe_allow_html=True)
        
        # Get hospitals if not already in session
        if not st.session_state.hospitals:
            with st.spinner(ui["searching_hospitals"]):
                hospitals = get_nearby_hospitals_osm(user_lat, user_lon, 
                                                   radius=radius*1000, 
                                                   max_results=max_results,
                                                   ui=ui)
                
                # Add a small delay to show the loading effect
                time.sleep(0.5)
                st.session_state.hospitals = hospitals
        else:
            hospitals = st.session_state.hospitals
        
        # Display results in two columns
        if hospitals:
            col1, col2 = st.columns([3, 2])
            
            with col1:
                # Create a Folium map with a dark theme
                m = folium.Map(location=[user_lat, user_lon], zoom_start=13, 
                              tiles="CartoDB dark_matter")
                
                # Add user marker
                folium.Marker(
                    [user_lat, user_lon],
                    popup="Your Location",
                    icon=folium.Icon(color="blue", icon="user", prefix="fa"),
                ).add_to(m)
                
                # Add hospital markers
                for h in hospitals:
                    folium.Marker(
                        [h["lat"], h["lon"]],
                        popup=f"<b>{h['name']}</b><br>{h['distance_km']} km",
                        icon=folium.Icon(color="red", icon="plus", prefix="fa"),
                    ).add_to(m)
                
                # Add circle showing search radius
                folium.Circle(
                    radius=radius*1000,
                    location=[user_lat, user_lon],
                    color="#3b82f6",
                    fill=True,
                    fill_opacity=0.2,
                ).add_to(m)
                
                st.markdown("<div class='map-container'>", unsafe_allow_html=True)
                folium_static(m, width=700)
                st.markdown("</div>", unsafe_allow_html=True)
            
            with col2:
                st.markdown(ui["nearest_hospitals"], unsafe_allow_html=True)
                
                for i, h in enumerate(hospitals):
                    osm_url = f"https://www.openstreetmap.org/?mlat={h['lat']}&mlon={h['lon']}#map=16/{h['lat']}/{h['lon']}"
                    google_maps_url = f"https://www.google.com/maps/search/?api=1&query={h['lat']},{h['lon']}"
                    
                    # Use the hospital_card translation with formatting
                    st.markdown(ui["hospital_card"].format(
                        i+1, h['name'], h['distance_km'], google_maps_url, osm_url
                    ), unsafe_allow_html=True)
        else:
            st.warning(ui["no_hospitals_found"])
    else:
        # Show placeholder when no location detected
        st.info(ui["click_detect_location"])
        
        # Show example map as placeholder
        col1, col2 = st.columns([3, 2])
        with col1:
            st.markdown(f"<div class='loading'>{ui['map_placeholder']}</div>", 
                      unsafe_allow_html=True)
            
# ЁЯУН Get user's location using IP (updated to use translations)
def get_user_location(ui):
    try:
        res = requests.get("https://ipinfo.io/json")
        if res.status_code == 200:
            data = res.json()
            loc = data["loc"].split(",")
            return float(loc[0]), float(loc[1])
    except:
        pass
    st.error(ui["location_error"])
    return None, None

# ЁЯПе Get nearby hospitals from OpenStreetMap (updated to use translations)
def get_nearby_hospitals_osm(lat, lon, radius=5000, max_results=5, ui=None):
    overpass_url = "http://overpass-api.de/api/interpreter"
    query = f"""
    [out:json];
    (
      node["amenity"="hospital"](around:{radius},{lat},{lon});
      way["amenity"="hospital"](around:{radius},{lat},{lon});
      relation["amenity"="hospital"](around:{radius},{lat},{lon});
    );
    out center;
    """

    try:
        res = requests.post(overpass_url, data=query)
        data = res.json()
        hospitals = []
        for element in data["elements"]:
            if "tags" in element:
                name = element["tags"].get("name", "Unnamed Hospital")
                h_lat = element.get("lat") or element["center"]["lat"]
                h_lon = element.get("lon") or element["center"]["lon"]
                distance = geodesic((lat, lon), (h_lat, h_lon)).km
                hospitals.append({
                    "name": name,
                    "lat": h_lat,
                    "lon": h_lon,
                    "distance_km": round(distance, 2)
                })

        # Sort by distance and return top results
        hospitals = sorted(hospitals, key=lambda x: x["distance_km"])[:max_results]
        return hospitals

    except Exception as e:
        if ui:
            st.error(ui["fetch_hospitals_error"].format(str(e)))
        else:
            st.error(f"Failed to fetch hospitals: {e}")
        return []

if __name__ == "__main__":
    main()